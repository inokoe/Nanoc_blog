{
    "version": "https://jsonfeed.org/version/1",
    "title": "Nanoc",
    "description": "",
    "home_page_url": "https://inokoe.github.io/Nanoc_blog",
    "feed_url": "https://inokoe.github.io/Nanoc_blog/feed.json",
    "user_comment": "",
    "author": {
        "name": "Nanoc"
    },
    "items": [
        {
            "id": "https://inokoe.github.io/Nanoc_blog/ucm-ucsi-acpi-zhuang-tai-ma-43/",
            "url": "https://inokoe.github.io/Nanoc_blog/ucm-ucsi-acpi-zhuang-tai-ma-43/",
            "title": "UCM-UCSI ACPI 状态码 43",
            "summary": "UCM-UCSI ACPI 此驱动用于Windows Type-C 接口相关功能，在设备管理中此驱动出现黄色感叹号，并状态43。 受此影响，电脑可能会出现一些异常，如无法PD充电。 Windows特定的系统版本或补丁以及BIOS更新导致的故障。 重置BIOS，笔记本未插电状态关机，并尽可能长按电源键使其开机，并强制断电以强制BIOS重新设置。 如果不适用此方法，请移至Google进行查询，有很多解决办法，但主要跟特定的机器相关。 ",
            "content_html": "<h2>UCM-UCSI ACPI</h2>\n<p>此驱动用于Windows Type-C 接口相关功能，在设备管理中此驱动出现黄色感叹号，并状态43。<br>受此影响，电脑可能会出现一些异常，如无法PD充电。</p>\n<h2>产生原因</h2>\n<p>Windows特定的系统版本或补丁以及BIOS更新导致的故障。</p>\n<h2>解决方法</h2>\n<p>重置BIOS，笔记本未插电状态关机，并尽可能长按电源键使其开机，并强制断电以强制BIOS重新设置。<br>如果不适用此方法，请移至Google进行查询，有很多解决办法，但主要跟特定的机器相关。</p>\n\n\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
            ],
            "date_published": "2021-09-18T22:44:00+08:00",
            "date_modified": "2022-02-05T17:47:33+08:00"
        },
        {
            "id": "https://inokoe.github.io/Nanoc_blog/jie-cheng-ji-suan/",
            "url": "https://inokoe.github.io/Nanoc_blog/jie-cheng-ji-suan/",
            "title": "阶乘计算",
            "summary": "输入一个正整数n，输出n!的值。 其中n!=123…n。 #includeusing namespace std;int n, r = 0, t, a[3000] ={1} ,len = 1;int main(){ cin &gt;&gt; n; ",
            "content_html": "<blockquote>输入一个正整数n，输出n!的值。<br>其中n!=1<em>2</em>3<em>…</em>n。</blockquote>\n<pre><code class=\"lang-cpp\">#include<restore-line-break>using namespace std;<restore-line-break>int n, r = 0, t, a[3000] ={1} ,len = 1;<restore-line-break><restore-line-break>int main()<restore-line-break>{<restore-line-break>    cin &gt;&gt; n;</code></pre>\n\n\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
            ],
            "date_published": "2021-04-20T18:16:03+08:00",
            "date_modified": "2022-02-05T17:47:33+08:00"
        },
        {
            "id": "https://inokoe.github.io/Nanoc_blog/c-stl-next_permutation/",
            "url": "https://inokoe.github.io/Nanoc_blog/c-stl-next_permutation/",
            "title": "C++ STL next_permutation",
            "summary": "字典序全排列 举例 #include using namespace std; int main() { int a[4]={1,2,3,4}; sort(a,a+4); //数组元素顺序将被改变，直到无法继续排序 do{ ",
            "content_html": "<h2>字典序全排列</h2>\n<p>举例</p>\n<pre><code class=\"lang-cpp\">#include <restore-line-break>using namespace std;<restore-line-break> <restore-line-break>int main() {<restore-line-break>    int a[4]={1,2,3,4};<restore-line-break>    sort(a,a+4);<restore-line-break>    //数组元素顺序将被改变，直到无法继续排序<restore-line-break>    do{</code></pre>\n\n\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
            ],
            "date_published": "2021-04-06T12:43:20+08:00",
            "date_modified": "2022-02-05T17:47:33+08:00"
        },
        {
            "id": "https://inokoe.github.io/Nanoc_blog/bitset-yong-fa/",
            "url": "https://inokoe.github.io/Nanoc_blog/bitset-yong-fa/",
            "title": "bitset 用法",
            "summary": "bitset C++的 bitset 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。 bitset bitset1; //无参构造，长度为４，默认每一位为０ bitset bitset2(12); //长度为８，二进制保存，前面用０补充 string z = &quot;100101&quot;; bitset bitset3(z); //长度为10，前面用０补充 char s2[] = &quot;10101&quot;; bitset bitset4(s2); //长度为13，前面用０补充 ",
            "content_html": "<h2>bitset</h2>\n<p>C++的 bitset 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。</p>\n<pre><code class=\"lang-cpp\">    bitset bitset1; //无参构造，长度为４，默认每一位为０<restore-line-break><restore-line-break>    bitset bitset2(12); //长度为８，二进制保存，前面用０补充<restore-line-break><restore-line-break>    string z = &quot;100101&quot;;<restore-line-break>    bitset bitset3(z); //长度为10，前面用０补充<restore-line-break><restore-line-break>    char s2[] = &quot;10101&quot;;<restore-line-break>    bitset bitset4(s2); //长度为13，前面用０补充<restore-line-break></code></pre>\n\n\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
            ],
            "date_published": "2021-04-06T12:32:48+08:00",
            "date_modified": "2022-02-05T17:47:33+08:00"
        },
        {
            "id": "https://inokoe.github.io/Nanoc_blog/cpp-li-yong-stringstreamzhuan-huan-zi-fu/",
            "url": "https://inokoe.github.io/Nanoc_blog/cpp-li-yong-stringstreamzhuan-huan-zi-fu/",
            "title": "Cpp 利用stringstream转换字符",
            "summary": "stringstream stringstream是包含在中的，其中定义了三个类：istringstream、ostringstream 和 stringstream，分别用来进行流的输入、输出和输入输出操作。 用法 #include using namespace std;int main(){ stringstream sts; string x = &quot;10&quot;; int z = 100; string y = &quot;&quot;; //string 给 string ",
            "content_html": "<h2>stringstream</h2>\n<blockquote>stringstream是包含在中的，其中定义了三个类：istringstream、ostringstream 和 stringstream，分别用来进行流的输入、输出和输入输出操作。</blockquote>\n<h2>用法</h2>\n<pre><code class=\"lang-cpp\">#include <restore-line-break>using namespace std;<restore-line-break><restore-line-break>int main()<restore-line-break>{<restore-line-break>    stringstream sts;<restore-line-break>    string x = &quot;10&quot;; <restore-line-break>    int z = 100;<restore-line-break>    string y = &quot;&quot;;<restore-line-break><restore-line-break>    //string 给 string</code></pre>\n\n\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
            ],
            "date_published": "2021-04-01T14:15:22+08:00",
            "date_modified": "2022-02-05T17:47:33+08:00"
        },
        {
            "id": "https://inokoe.github.io/Nanoc_blog/lan-qiao-li-jie-shi-ti-fa-xian-huan/",
            "url": "https://inokoe.github.io/Nanoc_blog/lan-qiao-li-jie-shi-ti-fa-xian-huan/",
            "title": "蓝桥 历届试题 发现环",
            "summary": "发现环 小明的实验室有N台电脑，编号1~N。原本这N台电脑之间有N-1条数据链接相连，恰好构成一个树形网络。在树形网络上，任意两台电脑之间有唯一的路径相连。 不过在最近一次维护网络时，管理员误操作使得某两台电脑之间增加了一条数据链接，于是网络中出现了环路。环路上的电脑由于两两之间不再是只有一条路径，使得这些电脑上的数据传输出现了BUG。 为了恢复正常传输。小明需要找到所有在环路上的电脑，你能帮助他吗？ 输入 第一行包含一个整数N。 以下N行每行两个整数a和b，表示a和b之间有一条数据链接相连。 对于30%的数据，1 按从小到大的顺序输出在环路上的电脑的编号，中间由一个空格分隔。 样例输入： 5 1 2 3 1 2 4 2 5 5 3 样例输出： 1 2 3 5 Code 思路：如果节点在环中，那么在去除了所有无关节点后，剩余度数一定会为2，即所求节点。 实现：初始化节点，通过节点中初始的无关节点，依次进入队列循环去除无关节。 # include using namespace std; int a,b,n;vector vec[100005]; // 邻接表int ranks[100005]; // 记录每个点的度数int main(){ cin &gt;&gt;&hellip;",
            "content_html": "<h2>发现环</h2>\n<blockquote>小明的实验室有N台电脑，编号1~N。原本这N台电脑之间有N-1条数据链接相连，恰好构成一个树形网络。在树形网络上，任意两台电脑之间有唯一的路径相连。<br>不过在最近一次维护网络时，管理员误操作使得某两台电脑之间增加了一条数据链接，于是网络中出现了环路。环路上的电脑由于两两之间不再是只有一条路径，使得这些电脑上的数据传输出现了BUG。<br>为了恢复正常传输。小明需要找到所有在环路上的电脑，你能帮助他吗？</blockquote>\n<blockquote>输入<br>第一行包含一个整数N。<br>以下N行每行两个整数a和b，表示a和b之间有一条数据链接相连。</p>\n<p>对于30%的数据，1 按从小到大的顺序输出在环路上的电脑的编号，中间由一个空格分隔。</p>\n<p>样例输入：<br>5<br>1 2<br>3 1<br>2 4<br>2 5<br>5 3</p>\n<p>样例输出：<br>1 2 3 5</blockquote>\n<h2>Code</h2>\n<p>思路：如果节点在环中，那么在去除了所有无关节点后，剩余度数一定会为2，即所求节点。<br>实现：初始化节点，通过节点中初始的无关节点，依次进入队列循环去除无关节。</p>\n<pre><code class=\"lang-cpp\"># include <restore-line-break>using namespace std;<restore-line-break> <restore-line-break>int a,b,n;<restore-line-break>vector vec[100005]; // 邻接表<restore-line-break>int ranks[100005]; // 记录每个点的度数<restore-line-break>int main(){<restore-line-break>    cin &gt;&gt; n;<restore-line-break>    for(int i = 0;i &lt; n;i++){<restore-line-break>        cin &gt;&gt; a &gt;&gt; b;<restore-line-break>        vec[a].push_back(b);<restore-line-break>        vec[b].push_back(a);<restore-line-break>        ranks[a]++;<restore-line-break>        ranks[b]++;<restore-line-break>    }<restore-line-break><restore-line-break>    queue q;<restore-line-break>    for(int i = 1;i  0){<restore-line-break>                ranks[u]--;<restore-line-break>                if(ranks[u] == 1) q.push(u);<restore-line-break>            }<restore-line-break>        }<restore-line-break>    }<restore-line-break><restore-line-break><restore-line-break>    for(int i = 1;i  0) </code></pre>\n\n\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
            ],
            "date_published": "2021-03-30T11:50:00+08:00",
            "date_modified": "2022-02-05T17:47:33+08:00"
        },
        {
            "id": "https://inokoe.github.io/Nanoc_blog/lan-qiao-bei-2020-li-jie-shi-ti-ping-mian-qie-fen/",
            "url": "https://inokoe.github.io/Nanoc_blog/lan-qiao-bei-2020-li-jie-shi-ti-ping-mian-qie-fen/",
            "title": "蓝桥杯 2020 历届试题 平面切分",
            "summary": "【问题描述】 平面上有N 条直线，其中第i条直线是y = Aix+Bi 请计算这些直线将平面分成了几个部分。 【输入格式】 输入的第一行包含一个整数N, 以下N行，包含两个证书 Ai，Bi 【输出格式】 一个整数代表答案 【样例输入】 31 1 2 2 3 3 【样例输出】 6 分析 直线三种情况：平行 重合 相交 当重合时，此时此条线无贡献，即无效。 平行时，跳过此次循环。 而相交的规律:每次新加入的线段如果和之前的线段有n个不同的交点，就在原来的基础上多分出n+1个平面 // l - 已有 ， m - 新加入 p.x=(m.y-l.y)/(l.x-m.x); p.y=(m.x*p.x)+m.y; 代码实现 #include using namespace std;int main(){ pair&hellip;",
            "content_html": "<h2>【问题描述】</h2>\n<blockquote>平面上有N 条直线，其中第i条直线是y = Aix+Bi<br>请计算这些直线将平面分成了几个部分。<br>【输入格式】<br>输入的第一行包含一个整数N,<br>以下N行，包含两个证书 Ai，Bi<br>【输出格式】<br>一个整数代表答案<br>【样例输入】<br>31<br>1<br>2 2<br>3 3<br>【样例输出】<br>6</blockquote>\n<h2>分析</h2>\n<p>直线三种情况：<em>平行 重合 相交</em><br>当<strong>重合</strong>时，此时此条线无贡献，即无效。<br><strong>平行</strong>时，跳过此次循环。<br>而<strong>相交</strong>的规律:每次新加入的线段如果和之前的线段有n个不同的交点，就在原来的基础上多分出n+1个平面</p>\n<h2>求直线交点</h2>\n<pre><code class=\"lang-cpp\">// l - 已有 ， m - 新加入<restore-line-break> p.x=(m.y-l.y)/(l.x-m.x);<restore-line-break> p.y=(m.x*p.x)+m.y;</code></pre>\n<h2>代码实现</h2>\n<pre><code class=\"lang-cpp\">#include <restore-line-break>using namespace std;<restore-line-break><restore-line-break>int main(){<restore-line-break>    pair p;<restore-line-break>    set points;<restore-line-break>    //vector记录新的直线x,y<restore-line-break>    vectorr,c;<restore-line-break>    //记录交点，防重复<restore-line-break>    mapbranch;<restore-line-break>    map::iterator it;<restore-line-break>    //记录本次两条线是否是重复线<restore-line-break>    bool is_repeat = false;<restore-line-break>    //直线总条数<restore-line-break>    int time;<restore-line-break>    double x,y;<restore-line-break>    long ans = 0;<restore-line-break>    cin&gt;&gt;time;<restore-line-break>    for(int i = 0 ; i &lt; time ; i++){<restore-line-break>        cin&gt;&gt;x&gt;&gt;y;<restore-line-break>        r.push_back(x);<restore-line-break>        c.push_back(y);<restore-line-break>        for(int j = 0 ; j &lt; i;j++){<restore-line-break>            if(r[j] == x){<restore-line-break>                if(c[j] == y){<restore-line-break>                    is_repeat=true;<restore-line-break>                    break;<restore-line-break>                }<restore-line-break>                else continue;<restore-line-break>            }<restore-line-break>            //计算交点<restore-line-break>            p.first = (y - c[j] )  / (r[j] - x);<restore-line-break>            p.second = (x * p.first )+ y;<restore-line-break>            points.insert(p);<restore-line-break>        }<restore-line-break>        //新加入的线贡献值为 去重交点总数+1<restore-line-break>        if(!is_repeat)ans += points.size() + 1 ;<restore-line-break>        is_repeat = false;<restore-line-break>        points.clear();<restore-line-break>    }<restore-line-break>    //加上初始平面<restore-line-break>    ans += 1;</code></pre>\n\n\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
            ],
            "date_published": "2021-03-28T18:06:00+08:00",
            "date_modified": "2022-02-05T17:47:33+08:00"
        },
        {
            "id": "https://inokoe.github.io/Nanoc_blog/lan-qiao-bei-2020zhen-ti-zi-chuan-fen-zhi/",
            "url": "https://inokoe.github.io/Nanoc_blog/lan-qiao-bei-2020zhen-ti-zi-chuan-fen-zhi/",
            "title": "蓝桥杯  2020真题 子串分值",
            "summary": " 题目描述 对于一个字符串S，我们定义S 的分值 f(S) 为S中恰好出现一次的字符个数。例如f (”aba”) = 1，f (”abc”) = 3, f (”aaa”) = 0。 现在给定一个字符串S[0…n-1]（长度为n），请你计算对于所有S的非空子串Si…j， f (S[i… j]) 的和是多少。 输入一行包含一个由小写字母组成的字符串S。 输出一个整数表示答案。 ababc 21 子串f值： a 1 ab 2 aba 1 abab 0 ababc 1 b 1 ba 2 bab 1 babc 2 a&hellip;",
            "content_html": "<blockquote>\n<h2>题目描述</h2>\n<p>对于一个字符串S，我们定义S 的分值 f(S) 为S中恰好出现一次的字符个数。例如f (”aba”) = 1，f (”abc”) = 3, f (”aaa”) = 0。<br>现在给定一个字符串S[0…n-1]（长度为n），请你计算对于所有S的非空子串S<a href=\"0\">i…j</a>， f (S[i… j]) 的和是多少。</p>\n</blockquote>\n<blockquote>\n<h2>【输入格式】</h2>\n<p>输入一行包含一个由小写字母组成的字符串S。</p>\n<h2>【输出格式】</h2>\n<p>输出一个整数表示答案。</p>\n<h2>【样例输入】</h2>\n<p>ababc</p>\n<h2>【样例输出】</h2>\n<p>21</p>\n<h2>【样例说明】</h2>\n<p>子串f值：<br>a 1<br>ab 2<br>aba 1<br>abab 0<br>ababc 1<br>b 1<br>ba 2<br>bab 1<br>babc 2<br>a 1<br>ab 2<br>abc 3<br>b 1<br>bc 2<br>c 1</p>\n<h2>【评测用例规模与约定】</h2>\n<p>对于20% 的评测用例，1 ≤ n ≤ 10；<br>对于40% 的评测用例，1 ≤ n ≤ 100；<br>对于50% 的评测用例，1 ≤ n ≤ 1000；<br>对于60% 的评测用例，1 ≤ n ≤ 10000；<br>对于所有评测用例，1 ≤ n ≤ 100000。</p>\n</blockquote>\n<h2>实现：</h2>\n<p>此代码只实现蓝桥练习系统50分 ， 后五个测试用例超时。</p>\n<pre><code class=\"lang-cpp\">#include  <restore-line-break>using namespace std;<restore-line-break><restore-line-break>int main()<restore-line-break>{<restore-line-break>  string in;<restore-line-break>  cin&gt;&gt;in;<restore-line-break>  map map;<restore-line-break>  long long ans = 0 , least = 0;<restore-line-break>  ans += in.size();<restore-line-break>  for(int i = 0 ; i &lt; in.size();i++){<restore-line-break>    least = 1;<restore-line-break>    map[in[i]]++;<restore-line-break>    for(int j = i+1 ; j &lt; in.size(); j++){<restore-line-break>      if( map.find(in[j]) == map.end()) {<restore-line-break>        map[in[j]]++;<restore-line-break>        least = least + 1;<restore-line-break>        ans += least;<restore-line-break>      }<restore-line-break>      else if( map.find(in[j])!=map.end() ){<restore-line-break>        if( map[in[j]] &gt; 0 ){<restore-line-break>          map[in[j]]--;<restore-line-break>          ans += least-1;<restore-line-break>          least = least -1;<restore-line-break>        }else{<restore-line-break>          ans += least;<restore-line-break>        }<restore-line-break>      }</code></pre>\n\n\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
            ],
            "date_published": "2021-03-27T15:49:53+08:00",
            "date_modified": "2022-02-05T17:47:33+08:00"
        },
        {
            "id": "https://inokoe.github.io/Nanoc_blog/lan-qiao-bei-suan-fa-xun-lian-ju-zhen-cheng-fa/",
            "url": "https://inokoe.github.io/Nanoc_blog/lan-qiao-bei-suan-fa-xun-lian-ju-zhen-cheng-fa/",
            "title": "蓝桥杯  算法训练 矩阵乘法",
            "summary": "记录一次憨憨代码。 时间限制：1.0s 内存限制：512.0MB 输入两个矩阵，分别是ms，sn大小。输出两个矩阵相乘的结果。 第一行，空格隔开的三个正整数m,s,n（均不超过200）。 接下来m行，每行s个空格隔开的整数，表示矩阵A（i，j）。 接下来s行，每行n个空格隔开的整数，表示矩阵B（i，j）。 m行，每行n个空格隔开的整数，输出相乘後的矩阵C（i，j）的值。 2 3 2 1 0 -1 1 1 -3 0 3 1 2 3 1 -3 2 -8 2 矩阵C应该是m行n列，其中C(i,j)等于矩阵A第i行行向量与矩阵B第j列列向量的内积。 例如样例中C(1,1)=(1,0,-1)(0,1,3) = 1 0 +01+(-1)3=-3 #include using namespace std;int main(){ int x, y, z; cin &gt;&gt; x&hellip;",
            "content_html": "<p>记录一次憨憨代码。</p>\n<blockquote>\n<h2>资源限制</h2>\n<p>时间限制：1.0s   内存限制：512.0MB</p>\n<h2>问题描述</h2>\n<p>　　输入两个矩阵，分别是m<em>s，s</em>n大小。输出两个矩阵相乘的结果。</p>\n<h2>输入格式</h2>\n<p>　　第一行，空格隔开的三个正整数m,s,n（均不超过200）。<br>　　接下来m行，每行s个空格隔开的整数，表示矩阵A（i，j）。<br>　　接下来s行，每行n个空格隔开的整数，表示矩阵B（i，j）。</p>\n<h2>输出格式</h2>\n<p>　　m行，每行n个空格隔开的整数，输出相乘後的矩阵C（i，j）的值。</p>\n<h2>样例输入</h2>\n<p>2 3 2<br>1 0 -1<br>1 1 -3<br>0 3<br>1 2<br>3 1</p>\n<h2>样例输出</h2>\n<p>-3 2<br>-8 2</p>\n<h2>提示</h2>\n<p>矩阵C应该是m行n列，其中C(i,j)等于矩阵A第i行行向量与矩阵B第j列列向量的内积。<br>例如样例中C(1,1)=(1,0,-1)<em>(0,1,3) = 1 </em> 0 +0<em>1+(-1)</em>3=-3</p>\n</blockquote>\n<pre><code class=\"lang-cpp\">#include <restore-line-break>using namespace std;<restore-line-break><restore-line-break>int main()<restore-line-break>{<restore-line-break>  int x, y, z;<restore-line-break>  cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;<restore-line-break>  vector a;<restore-line-break>  vector b;<restore-line-break>  vector c;<restore-line-break>  vector d;<restore-line-break>  vector temp;<restore-line-break>  int t = 0;<restore-line-break>  for (int i = 0; i &lt; x; i++)<restore-line-break>  {<restore-line-break>    for (int j = 0; j &lt; y; j++)<restore-line-break>    {<restore-line-break>      cin &gt;&gt; t;<restore-line-break>      temp.push_back(t);<restore-line-break>    }<restore-line-break>    a.push_back(temp);<restore-line-break>    temp.clear();<restore-line-break>  }<restore-line-break><restore-line-break>  /*<restore-line-break>  // a输出<restore-line-break>  for (int i = 0; i &lt; x; i++)<restore-line-break>  {<restore-line-break>    for (int j = 0; j &lt; y; j++)<restore-line-break>    {</code></pre>\n\n\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
            ],
            "date_published": "2021-03-24T15:28:36+08:00",
            "date_modified": "2022-02-05T17:47:33+08:00"
        },
        {
            "id": "https://inokoe.github.io/Nanoc_blog/zui-da-zhi-yin-shu/",
            "url": "https://inokoe.github.io/Nanoc_blog/zui-da-zhi-yin-shu/",
            "title": "最大质因数",
            "summary": "最大质因数 质因数：每个合数都可以写成几个质数（也可称为素数）相乘的形式 ，这几个质数就都叫做这个合数的质因数。 分解质因数：分解质因数的方法是先用一个合数的最小质因数去除这个合数，得出的数若是一个质数，就写成这个合数相乘形式；若是一个合数就继续按原来的方法，直至最后是一个质数 。 公约数，亦称“公因数”。它是一个能被若干个整数同时均整除的整数。如果一个整数同时是几个整数的约数，称这个整数为它们的“公约数”；公约数中最大的称为最大公约数。对任意的若干个正整数，1总是它们的公因数。 int GetMaxPrime(int n){ int i = 2; int res = 1; while (n &gt; 2) { if (n % i == 0) { n /= i; res = i; } else i++; } return res;} ",
            "content_html": "<h2>最大质因数</h2>\n<blockquote>质因数：每个合数都可以写成几个质数（也可称为素数）相乘的形式 ，这几个质数就都叫做这个合数的质因数。</p>\n<p>分解质因数：分解质因数的方法是先用一个合数的最小质因数去除这个合数，得出的数若是一个质数，就写成这个合数相乘形式；若是一个合数就继续按原来的方法，直至最后是一个质数 。</p>\n<p>公约数，亦称“公因数”。它是一个能被若干个整数同时均整除的整数。如果一个整数同时是几个整数的约数，称这个整数为它们的“公约数”；公约数中最大的称为最大公约数。对任意的若干个正整数，1总是它们的公因数。</blockquote>\n<pre><code class=\"lang-cpp\">int GetMaxPrime(int n)<restore-line-break>{<restore-line-break>  int i = 2;<restore-line-break>  int res = 1;<restore-line-break>  while (n &gt; 2)<restore-line-break>  {<restore-line-break>    if (n % i == 0)<restore-line-break>    {<restore-line-break>      n /= i;<restore-line-break>      res = i;<restore-line-break>    }<restore-line-break>    else<restore-line-break>      i++;<restore-line-break>  }<restore-line-break>  return res;<restore-line-break>}</code></pre>\n<p><img loading=\"lazy\" src=\"https://inokoe.github.io/Nanoc_blog/media/posts/136/204222819.png\" sizes=\"(min-width: 61.3125em) 50vw, 100vw\" srcset=\"https://inokoe.github.io/Nanoc_blog/media/posts/136/responsive/204222819-xs.png 300w ,https://inokoe.github.io/Nanoc_blog/media/posts/136/responsive/204222819-sm.png 480w ,https://inokoe.github.io/Nanoc_blog/media/posts/136/responsive/204222819-md.png 768w\"  alt=\"质因数.png\" title=\"质因数.png\"></p>\n\n\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
            ],
            "date_published": "2021-03-23T17:12:00+08:00",
            "date_modified": "2022-02-05T17:47:33+08:00"
        }
    ]
}
