{
    "version": "https://jsonfeed.org/version/1",
    "title": "Nanoc",
    "description": "",
    "home_page_url": "https://nanoc.work",
    "feed_url": "https://nanoc.work/feed.json",
    "user_comment": "",
    "author": {
        "name": "Nanoc"
    },
    "items": [
        {
            "id": "https://nanoc.work/python-request/",
            "url": "https://nanoc.work/python-request/",
            "title": "Python Request Timeout",
            "summary": "Source You can find more data from bellow: https://github.com/psf/requests https://docs.python-requests.org/en/latest/ https://pypi.org/project/requests/ pip install requests or pip3 install requests In the event of a network problem (e.g. DNS failure, refused connection, etc), Requests will raise a ConnectionError exception. Response.raise_for_status() will raise an HTTPError if the HTTP&hellip;",
            "content_html": "<h2 id=\"source\">Source</h2>\n<p>You can find more data from bellow:</p>\n<blockquote>\n<p><a href=\"https://github.com/psf/requests\">https://github.com/psf/requests</a><br><a href=\"https://docs.python-requests.org/en/latest/\">https://docs.python-requests.org/en/latest/</a>\n<a href=\"https://pypi.org/project/requests/\">https://pypi.org/project/requests/</a></p>\n</blockquote>\n<h2 id=\"install\">Install</h2>\n<p>pip install requests\nor\npip3 install requests</p>\n<h2 id=\"errors-and-exceptions\">Errors and Exceptions</h2>\n<blockquote>\n<p>In the event of a network problem (e.g. DNS failure, refused connection, etc), Requests will raise a ConnectionError exception.</p>\n</blockquote>\n<blockquote>\n<p>Response.raise_for_status() will raise an HTTPError if the HTTP request returned an unsuccessful status code.</p>\n</blockquote>\n<blockquote>\n<p>If a request times out, a Timeout exception is raised.</p>\n</blockquote>\n<blockquote>\n<p>If a request exceeds the configured number of maximum redirections, a TooManyRedirects exception is raised.</p>\n</blockquote>\n<blockquote>\n<p>All exceptions that Requests explicitly raises inherit from requests.exceptions.RequestException.</p>\n</blockquote>\n<h2 id=\"make-timeout\">Make Timeout</h2>\n<p>So we can set the timeout as follows:</p>\n<pre><code class=\"language-python\">try:\n    response = requests.get(url,timeout=2)\nexcept requests.exceptions.RequestException as e:\n    function()\n</code></pre>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-02-07T19:14:03+08:00",
            "date_modified": "2022-02-07T22:49:49+08:00"
        },
        {
            "id": "https://nanoc.work/amhmian-ban-lu-jing/",
            "url": "https://nanoc.work/amhmian-ban-lu-jing/",
            "title": "AMH面板路径",
            "summary": "Python连接数据库 路径位于/tmp/mysql*.sock 例：unix_socket=’/tmp/mysql-5.6.sock’ /home/wwwroot/ vhost中包含了不同站点Nginx的配置文件 /usr/local/bin ",
            "content_html": "<h2 id=\"python连接数据库\">Python连接数据库</h2>\n<p>路径位于/tmp/mysql*.sock\n例：unix_socket=’/tmp/mysql-5.6.sock’</p>\n<h2 id=\"运行环境配置路径\">运行环境配置路径</h2>\n<p>/home/wwwroot/\nvhost中包含了不同站点Nginx的配置文件</p>\n<h2 id=\"软件配置\">软件配置</h2>\n<p>/usr/local/bin</p>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Linux"
            ],
            "date_published": "2022-02-06T22:52:15+08:00",
            "date_modified": "2022-02-06T22:52:32+08:00"
        },
        {
            "id": "https://nanoc.work/linux-fu-wu-qi-mian-ban-hui-zong-2/",
            "url": "https://nanoc.work/linux-fu-wu-qi-mian-ban-hui-zong-2/",
            "title": "Linux 服务器面板汇总",
            "summary": "用途 这里主要指提供Web Server环境快速部署，以快速上线PHP项目，并提供优质的性能体验，或降低开站门槛提供完整的建站体验。 快速部署LNMP、LAMP 提供 Let’s Encrypt 证书或自由证书启用HTTPS 隐藏了部分技术细节对新手友好 以下将列举我所使用过的几个产品。 国内 名字 描述 宝塔 为Python所编写，提供免费版，适合所有人 AMH面板 起始2011年，但UI较难懂，适合具有一定经验 国外 名字 描述 cyberpanel 使用Openlitespeed，UI简洁，提供免费版，完整的DNS和邮局体验 Vesta 提供LNMP、LAMP，邮箱，DNS ",
            "content_html": "<h2 id=\"用途\">用途</h2>\n<p>这里主要指提供Web Server环境快速部署，以快速上线PHP项目，并提供优质的性能体验，或降低开站门槛提供完整的建站体验。</p>\n<ul>\n<li>快速部署LNMP、LAMP</li>\n<li>提供 Let’s Encrypt 证书或自由证书启用HTTPS</li>\n<li>隐藏了部分技术细节对新手友好\n以下将列举我所使用过的几个产品。</li>\n</ul>\n<!-- more -->\n\n<h2 id=\"国内\">国内</h2>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>宝塔</td>\n<td>为Python所编写，提供免费版，适合所有人</td>\n</tr>\n<tr>\n<td>AMH面板</td>\n<td>起始2011年，但UI较难懂，适合具有一定经验</td>\n</tr>\n</tbody></table>\n<h2 id=\"国外\">国外</h2>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cyberpanel</td>\n<td>使用Openlitespeed，UI简洁，提供免费版，完整的DNS和邮局体验</td>\n</tr>\n<tr>\n<td>Vesta</td>\n<td>提供LNMP、LAMP，邮箱，DNS</td>\n</tr>\n</tbody></table>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Linux"
            ],
            "date_published": "2022-02-06T22:09:21+08:00",
            "date_modified": "2022-02-06T22:54:47+08:00"
        },
        {
            "id": "https://nanoc.work/python-useragent-ku/",
            "url": "https://nanoc.work/python-useragent-ku/",
            "title": "Python UserAgent 库",
            "summary": "Python UserAgent 库 my-fake-useragent https://pypi.org/project/my-fake-useragent/ https://github.com/a358003542/my-fake-useragent 针对Useragent访问频次限制的站点，每次请求更换一个Useragent即可。 pip install my_fake_useragent //python3 pip3 install my_fake_useragent 特点 提供浏览器定制，如Chrome、Edge，包括移动端 from my_fake_useragent import UserAgent ua = UserAgent(family=&#39;chrome&#39;) res = ua.random() 在限制Useragent的情况下，且长达数万频次的爬取中，程序顺利执行完毕。 ",
            "content_html": "<h1 id=\"python-useragent-库\">Python UserAgent 库</h1>\n<p>my-fake-useragent</p>\n<blockquote>\n<p><a href=\"https://pypi.org/project/my-fake-useragent/\">https://pypi.org/project/my-fake-useragent/</a>\n<a href=\"https://github.com/a358003542/my-fake-useragent\">https://github.com/a358003542/my-fake-useragent</a></p>\n</blockquote>\n<h2 id=\"用处\">用处</h2>\n<p>针对Useragent访问频次限制的站点，每次请求更换一个Useragent即可。</p>\n<h2 id=\"安装\">安装</h2>\n<pre><code class=\"language-shell\">pip install my_fake_useragent\n//python3\npip3 install my_fake_useragent\n</code></pre>\n<h2 id=\"特点\">特点</h2>\n<p>提供浏览器定制，如Chrome、Edge，包括移动端</p>\n<h2 id=\"使用\">使用</h2>\n<pre><code class=\"language-python\">from my_fake_useragent import UserAgent\nua = UserAgent(family=&#39;chrome&#39;)\nres = ua.random()\n</code></pre>\n<p>在限制Useragent的情况下，且长达数万频次的爬取中，程序顺利执行完毕。</p>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-02-06T14:14:00+08:00",
            "date_modified": "2022-02-06T14:14:00+08:00"
        },
        {
            "id": "https://nanoc.work/linuxgeng-huan-dns/",
            "url": "https://nanoc.work/linuxgeng-huan-dns/",
            "title": "Linux更换DNS",
            "summary": "echo -e &quot;options timeout:1 attempts:1 rotate\\nnameserver 8.8.8.8\\nnameserver 114.114.114.114&quot; &gt;/etc/resolv.conf; ",
            "content_html": "<pre><code class=\"language-shell\">echo -e &quot;options timeout:1 attempts:1 rotate\\nnameserver 8.8.8.8\\nnameserver 114.114.114.114&quot; &gt;/etc/resolv.conf;\n</code></pre>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Linux"
            ],
            "date_published": "2022-02-06T13:57:16+08:00",
            "date_modified": "2022-02-06T13:57:16+08:00"
        },
        {
            "id": "https://nanoc.work/shi-jian-xian-fen-ge-fu/",
            "url": "https://nanoc.work/shi-jian-xian-fen-ge-fu/",
            "title": "时间线分隔符",
            "summary": "时光荏苒，转眼一年已过，由于服务器到期，将现有写过的仍具有一定价值的文章转移至此，服务暂由Netlify提供，以便无后端快速记录。 ",
            "content_html": "<p>时光荏苒，转眼一年已过，由于服务器到期，将现有写过的仍具有一定价值的文章转移至此，服务暂由Netlify提供，以便无后端快速记录。</p>\n",
            "image": "https://nanoc.work/media/posts/163/2.jpg",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Others"
            ],
            "date_published": "2022-02-05T20:15:56+08:00",
            "date_modified": "2022-02-05T20:21:20+08:00"
        },
        {
            "id": "https://nanoc.work/python-requestandbeautifulsouppa-chong-shi-yong-fang-fa-su-ji/",
            "url": "https://nanoc.work/python-requestandbeautifulsouppa-chong-shi-yong-fang-fa-su-ji/",
            "title": "Python-request&amp;beautifulsoup爬虫使用方法速记",
            "summary": "Python-request&amp;beautifulsoup爬虫使用方法速记 简单记录request&amp;bs4使用方法。 import requests # 浏览器头 headers = { &#39;user_agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&#39; } # 传参 params = {} params[&#39;email&#39;] = userName[number] params[&#39;passwd&#39;] = userPasswd[number] # 发送request get请求 response = requests.get(url=url, params=params, headers=headers) # 发送request post请求 response&hellip;",
            "content_html": "<h2 id=\"python-requestbeautifulsoup爬虫使用方法速记\">Python-request&amp;beautifulsoup爬虫使用方法速记</h2>\n<p>简单记录request&amp;bs4使用方法。</p>\n<h2 id=\"request\">request</h2>\n<pre><code class=\"language-python\">import requests\n# 浏览器头\nheaders = {\n    &#39;user_agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&#39;\n}\n# 传参\nparams = {}\nparams[&#39;email&#39;] = userName[number]\nparams[&#39;passwd&#39;] = userPasswd[number]\n# 发送request get请求\nresponse = requests.get(url=url, params=params, headers=headers)\n# 发送request post请求\nresponse = requests.post(url=url, params=params, headers=headers)\n</code></pre>\n<pre><code class=\"language-python\">headers = {\n    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; WOW64)&#39;\n    &#39; AppleWebKit/537.36(KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&#39;,\n    &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,\n}\n</code></pre>\n<h2 id=\"beautifulsoup\">beautifulsoup</h2>\n<pre><code class=\"language-python\">from bs4 import BeautifulSoup\n\n#-----\n# 解析|\n#-----\n# 发起请求\nresponse = requests.get(url, headers=headers)\n# 指定编码\nresponse.encoding = &#39;utf-8&#39;\nsoup = BeautifulSoup(response.text)\n# 使用lxml解析\nsoup = BeautifulSoup(html, &#39;lxml&#39;)\n\n#--------\n# 元素选择| # 使用selector,返回list\n#--------\n# 选择指定元素一次\nsoup = soup.select_one(&quot;a&quot;)\n# 选择全部指定元素\nsoup = soup.select(&quot;a&quot;)\n# 选择全部指定元素\nsoup = soup.find_all(&quot;a&quot;)\n# 按照属性查找\nsoup = soup.select_one(&#39;p [href=&quot;http://example.com/tillie&quot;]&#39;)\n# 通过 id 名查找\nsoup.select_one(&#39;#ID&#39;)\n# 通过类名查找\nsoup.select_one(&#39;.sister&#39;)\n#循环\nfor i in soup:\n    print(i.text)\n\n#--------\n# 获取属性|\n#--------\nlist[0].get(&#39;href&#39;)\n\n\n#--------\n# Xpath|\n#--------\ndemo = selector.xpath(&#39;&#39;)\n</code></pre>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-02-05T20:05:40+08:00",
            "date_modified": "2022-02-05T20:05:40+08:00"
        },
        {
            "id": "https://nanoc.work/pythonjin-xing-base64jie-ma/",
            "url": "https://nanoc.work/pythonjin-xing-base64jie-ma/",
            "title": "Python进行Base64解码",
            "summary": "Python进行Base64解码 使用base64进行解码 import base64 message = &quot;Hello&quot; # 返回字节对象 a = bytes(message, &#39;utf-8&#39;) print(a) # Base64编码 b = base64.b64encode(a) print(b) # Base64解码并.decode(&#39;utf-8&#39;)去掉b&#39;&#39; c = base64.b64decode(b).decode(&#39;utf-8&#39;) print(c) ",
            "content_html": "<h2 id=\"python进行base64解码\">Python进行Base64解码</h2>\n<p>使用base64进行解码</p>\n<pre><code class=\"language-python\">import base64\n\nmessage = &quot;Hello&quot;\n# 返回字节对象\na = bytes(message, &#39;utf-8&#39;)\nprint(a)\n# Base64编码\nb = base64.b64encode(a)\nprint(b)\n# Base64解码并.decode(&#39;utf-8&#39;)去掉b&#39;&#39;\nc = base64.b64decode(b).decode(&#39;utf-8&#39;)\nprint(c)\n</code></pre>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-02-05T20:05:17+08:00",
            "date_modified": "2022-02-05T20:05:17+08:00"
        },
        {
            "id": "https://nanoc.work/python-multiprocessingyong-fa-jian-dan-su-ji/",
            "url": "https://nanoc.work/python-multiprocessingyong-fa-jian-dan-su-ji/",
            "title": "Python Multiprocessing用法简单速记",
            "summary": "Python Multiprocessing用法简单速记 使用Multiprocessing进行简单多进程。 from multiprocessing import Pool import time import random def toPool(todo): newarr = [] for i in range(1000): newarr.append(random.random()*10) newarr.sort() if __name__ == &quot;__main__&quot;: start_time = time.time() arr = [] for i in range(10000): arr.append(i) for i in arr: newarr = [] for&hellip;",
            "content_html": "<h2 id=\"python-multiprocessing用法简单速记\">Python Multiprocessing用法简单速记</h2>\n<p>使用Multiprocessing进行简单多进程。</p>\n<pre><code class=\"language-python\">from multiprocessing import Pool\nimport time\nimport random\n\ndef toPool(todo):\n    newarr = []\n    for i in range(1000):\n        newarr.append(random.random()*10)\n        newarr.sort()\n\n\nif __name__ == &quot;__main__&quot;:\n    start_time = time.time()\n    arr = []\n    for i in range(10000):\n        arr.append(i)\n    for i in arr:\n        newarr = []\n        for i in range(1000):\n            newarr.append(random.random()*10)\n            newarr.sort()\n    end_time = time.time()\n    use_time = end_time - start_time\n    print(&quot;first:&quot;+ str(use_time))\n    # 多进程\n    start_time = time.time()\n    arr = []\n    for i in range(10000):\n        arr.append(i)\n    pool = Pool(processes=4)\n    pool.map(toPool, arr)\n    pool.close()\n    pool.join()\n    end_time = time.time()\n    use_time = end_time - start_time\n    print(&quot;second:&quot;+ str(use_time))\n</code></pre>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-02-05T20:04:59+08:00",
            "date_modified": "2022-02-05T20:04:59+08:00"
        },
        {
            "id": "https://nanoc.work/python-wen-jian-du-xie-cao-zuo/",
            "url": "https://nanoc.work/python-wen-jian-du-xie-cao-zuo/",
            "title": "Python 文件读写操作",
            "summary": "读写模式 值 描述 r 读模式 w 写模式 a 追加模式 b 二进制模式（可追加到其他模式中） + 读/写模式（可追加到其他模式中 # 追加读写模式 自动创建文件 f = open(&quot;demo.txt&quot;, &#39;a+&#39;, encoding=&quot;utf-8&quot;) f.write(soup.text) f.close() # 覆盖 自动创建文件 f = open(&quot;C:/Users/Inokoe/Desktop/demo.txt&quot;, &#39;w&#39;, encoding=&quot;utf-8&quot;) f.write(&#39;653&#39;) f.close() f = open(&quot;C:/Users/Inokoe/Desktop/demo.txt&quot;, &#39;w+&#39;, encoding=&quot;utf-8&quot;) f.write(&#39;653&#39;) # 定位到开头可以正常读取 f.seek(0) print(f.read()) f.close() #&hellip;",
            "content_html": "<h2 id=\"读写模式\">读写模式</h2>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>读模式</td>\n</tr>\n<tr>\n<td>w</td>\n<td>写模式</td>\n</tr>\n<tr>\n<td>a</td>\n<td>追加模式</td>\n</tr>\n<tr>\n<td>b</td>\n<td>二进制模式（可追加到其他模式中）</td>\n</tr>\n<tr>\n<td>+</td>\n<td>读/写模式（可追加到其他模式中</td>\n</tr>\n</tbody></table>\n<pre><code class=\"language-python\"># 追加读写模式 自动创建文件\nf = open(&quot;demo.txt&quot;, &#39;a+&#39;, encoding=&quot;utf-8&quot;)\nf.write(soup.text)\nf.close()\n\n# 覆盖 自动创建文件\nf = open(&quot;C:/Users/Inokoe/Desktop/demo.txt&quot;, &#39;w&#39;, encoding=&quot;utf-8&quot;)\nf.write(&#39;653&#39;) \nf.close()\n\nf = open(&quot;C:/Users/Inokoe/Desktop/demo.txt&quot;, &#39;w+&#39;, encoding=&quot;utf-8&quot;)\nf.write(&#39;653&#39;) \n# 定位到开头可以正常读取\nf.seek(0)\nprint(f.read())\nf.close()\n\n# 只读\nf = open(&quot;C:/Users/Inokoe/Desktop/demo.txt&quot;, &#39;r&#39;, encoding=&quot;utf-8&quot;)\nf.write(&#39;653&#39;) \nf.close()\n</code></pre>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-02-05T20:04:42+08:00",
            "date_modified": "2022-02-05T20:04:42+08:00"
        }
    ]
}
