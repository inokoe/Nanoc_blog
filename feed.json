{
    "version": "https://jsonfeed.org/version/1",
    "title": "Nanoc",
    "description": "",
    "home_page_url": "https://blog.nanoc.work",
    "feed_url": "https://blog.nanoc.work/feed.json",
    "user_comment": "",
    "author": {
        "name": "Nanoc"
    },
    "items": [
        {
            "id": "https://blog.nanoc.work/dockerchang-yong-qi-dong-can-shu/",
            "url": "https://blog.nanoc.work/dockerchang-yong-qi-dong-can-shu/",
            "title": "Docker常用启动参数",
            "summary": "Docker常用启动参数 通过启动参数来创建Docker容器 创建Centos8 docker run -i -t -d --name centos8 --cpus=\"3\" -m 600m -p 30001:22 -p 30002:21 -p 30005:80 -p 30006:443 --restart=always --dns 114.114.114.114 -v /opt/www:/www --privileged=true centos:latest 创建nextcloud docker run -d --name nextcloud --restart=always --dns 114.114.114.114 -p 8080:80 -v /opt/nextcloud:/var/www/html --cpus=\"3\" -m 400m nextcloud&hellip;",
            "content_html": "<h2 id=\"docker常用启动参数\">Docker常用启动参数</h2>\n<p><strong>通过启动参数来创建Docker容器</strong></p>\n<!--more-->\n\n\n<ul>\n<li>-i “交互模式”运行容器</li>\n<li>-t 容器启动后会进入其命令行</li>\n<li>-d 创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)</li>\n<li>–name 为容器命名</li>\n<li>-p xx:xx 表示端口映射</li>\n<li>–cpus=”x” 表示CPU限制</li>\n<li>-m 400m 控制内存大小</li>\n<li>-v /xx:/xx 映射存储卷</li>\n<li>–dns 114.114.114.114 设置DNS</li>\n<li>–restart=always 跟随容器启动</li>\n<li>–network=host host网络</li>\n<li>-e TZ=”Asia/Shanghai” 修改时区</li>\n<li>–privileged=true 拥有写入权</li>\n</ul>\n<h2 id=\"实例\">实例</h2>\n<p><strong>创建Centos8</strong>\n<code>docker run -i -t -d --name centos8 --cpus=\"3\" -m 600m -p 30001:22  -p 30002:21  -p 30005:80  -p 30006:443  --restart=always  --dns 114.114.114.114 -v /opt/www:/www --privileged=true centos:latest</code>\n<strong>创建nextcloud</strong>\n<code>docker run -d --name nextcloud --restart=always --dns 114.114.114.114 -p 8080:80 -v /opt/nextcloud:/var/www/html --cpus=\"3\" -m 400m  nextcloud</code>\n<strong>更多例子</strong></p>\n<pre><code class=\"language-shell\">docker run -d -p 30001:80 --name kodexplorer -v /opt/kodexplorer:/var/www/html ugeek/kodexplorer:arm\n\ndocker run -it --network=host azking/arm64_bt59_lnmp sh /www/init.sh\n\ndocker run -i -t -d --name centos8 -p 30002:80 -p 30003:443 -p 30004:30004 --privileged=true --cpus=&quot;3&quot; -m 550m  -v /opt/www:/www centos:latest\n\ndocker run -i -t -d --name centos8 --restart always --privileged=true --cpus=&quot;2&quot; -m 128m  centos:latest\n\ndocker run -d --name nextcloud --restart=always --dns 114.114.114.114 -p 8080:80 -v /opt/nextcloud:/var/www/html --cpus=&quot;3&quot; -m 400m  nextcloud\n \ndocker run -d --name kodbox --dns 114.114.114.114 -p 30000:80 -p 30001:443 --cpus=&quot;3&quot; -m 400m -v /opt/kodbox:/var/www/html scjtqs/kodbox:arm64 kodbox\n\ndocker run -d --name  kodbox  --restart=always  --dns 114.114.114.114 -p 30000:80 -p 30001:443 --cpus=&quot;3&quot; -m 400m -v /opt/kodbox:/var/www/html lstcml/kodbox kodbox\n\ndocker run -d --name cloudreve  --dns 114.114.114.114 -e PUID=0 -e PGID=0 -e TZ=&quot;Asia/Shanghai&quot; -p 30001:5212 --cpus=&quot;3&quot; -m 400m  --restart=unless-stopped xavierniu/cloudreve:3.2.0-arm64v8\n\ndocker run -d --name=typecho-blog --cpus=&quot;3&quot; -m 300m --restart always --mount type=tmpfs,destination=/tmp -v /opt/typecho:/data -e PHP_TZ=Asia/Shanghai -e PHP_MAX_EXECUTION_TIME=600 -p 30000:80 80x86/typecho:arm64\n</code></pre>\n<h2 id=\"进入centos8容器\">进入Centos8容器</h2>\n<pre><code class=\"language-shell\">docker exec -it 容器名 bash\n</code></pre>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Docker"
            ],
            "date_published": "2022-02-05T19:48:13+08:00",
            "date_modified": "2022-02-05T19:48:36+08:00"
        },
        {
            "id": "https://blog.nanoc.work/cpp-bitset/",
            "url": "https://blog.nanoc.work/cpp-bitset/",
            "title": "Cpp Bitset ",
            "summary": " Bitset C++的 bitset 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。 bitset&lt;4&gt; bitset1; //无参构造，长度为４，默认每一位为０ bitset&lt;8&gt; bitset2(12); //长度为８，二进制保存，前面用０补充 string z = \"100101\"; bitset&lt;10&gt; bitset3(z); //长度为10，前面用０补充 char s2[] = \"10101\"; bitset&lt;13&gt; bitset4(s2); //长度为13，前面用０补充 cout &lt;&lt; bitset1 &lt;&lt; endl; //0000 cout &lt;&lt; bitset2 &lt;&lt; endl; //00001100 cout &lt;&lt; bitset3 &lt;&lt; endl; //0000100101&hellip;",
            "content_html": "\n    <h2 id=\"bitset\">\n      Bitset\n    </h2>\n\n  <p>\n    C++的 bitset 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。\n  </p>\n<pre class=\"line-numbers  language-html\"><code> bitset&lt;4&gt; bitset1; \n //无参构造，长度为４，默认每一位为０\n\n bitset&lt;8&gt; bitset2(12); \n //长度为８，二进制保存，前面用０补充\n\n string z = \"100101\";\n bitset&lt;10&gt; bitset3(z); \n //长度为10，前面用０补充\n\n char s2[] = \"10101\";\n bitset&lt;13&gt; bitset4(s2); \n //长度为13，前面用０补充\n\n cout &lt;&lt; bitset1 &lt;&lt; endl; //0000\n cout &lt;&lt; bitset2 &lt;&lt; endl; //00001100\n cout &lt;&lt; bitset3 &lt;&lt; endl; //0000100101\n cout &lt;&lt; bitset4 &lt;&lt; endl; //0000000010101\n bitset&lt;2&gt; bitset1(12);  \n //12的二进制为1100（长度为４），但bitset1的size=2，只取后面部分，即00\n\n string x = \"100101\";\n bitset&lt;4&gt; bitset2(x); \n //x的size=6，而bitset的size=4，只取前面部分，即1001\n\n char s2[] = \"11101\";\n bitset&lt;4&gt; bitset3(s2); \n //与bitset2同理，只取前面部分，即1110\n\n cout &lt;&lt; bitset1 &lt;&lt; endl; //00\n cout &lt;&lt; bitset2 &lt;&lt; endl; //1001\n cout &lt;&lt; bitset3 &lt;&lt; endl; //1110\n\n bitset&lt;8&gt; foo(\"10011011\");\n string s = foo.to_string();\n //将bitset转换成string类型\n unsigned long a = foo.to_ulong();  \n //将bitset转换成unsigned long类型\n unsigned long long b = foo.to_ullong(); \n //将bitset转换成unsigned long long类型\n cout &lt;&lt; s &lt;&lt; endl; //10011011\n cout &lt;&lt; a &lt;&lt; endl; //155\n cout &lt;&lt; b &lt;&lt; endl; //155</code></pre>",
            "image": "https://blog.nanoc.work/media/posts/147/1.png",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "C++"
            ],
            "date_published": "2022-02-05T19:21:44+08:00",
            "date_modified": "2022-02-05T19:23:51+08:00"
        }
    ]
}
