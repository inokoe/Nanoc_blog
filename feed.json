{
    "version": "https://jsonfeed.org/version/1",
    "title": "Nanoc",
    "description": "",
    "home_page_url": "https://nanoc.work",
    "feed_url": "https://nanoc.work/feed.json",
    "user_comment": "",
    "author": {
        "name": "Nanoc"
    },
    "items": [
        {
            "id": "https://nanoc.work/github-action-zhi-xing-wan-bi-gitdao-cang-ku/",
            "url": "https://nanoc.work/github-action-zhi-xing-wan-bi-gitdao-cang-ku/",
            "title": "Github Action 执行完毕GIT到仓库",
            "summary": "公开仓库 - uses: actions/checkout@v2 with: ref: main token: ${{ secrets.token }} 若是私人仓库 你需要先创建属于你的github token，并设置为Actions secrets。 然后这样使用 - uses: actions/checkout@v2 with: ref: main token: ${{ secrets.token }} 当程序执行完毕 若文件已经更改，这样可以GIT到仓库 - name: Commit files uses: stefanzweifel/git-auto-commit-action@v4 with: commit_message: Action Commit push_options: --force 完整示例 name: &#39;test&#39; on: #&hellip;",
            "content_html": "<h2 id=\"公开仓库\">公开仓库</h2>\n<pre><code>      - uses: actions/checkout@v2\n        with:\n          ref: main\n          token: ${{ secrets.token }}\n</code></pre>\n<h2 id=\"若是私人仓库\">若是私人仓库</h2>\n<p>你需要先创建属于你的github token，并设置为Actions secrets。\n然后这样使用</p>\n<pre><code>      - uses: actions/checkout@v2\n        with:\n          ref: main\n          token: ${{ secrets.token }}\n</code></pre>\n<h2 id=\"当程序执行完毕\">当程序执行完毕</h2>\n<p>若文件已经更改，这样可以GIT到仓库</p>\n<pre><code>      - name: Commit files\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: Action Commit\n          push_options: --force\n</code></pre>\n<h2 id=\"完整示例\">完整示例</h2>\n<pre><code>name: &#39;test&#39;\non:\n  # push:\n  #   branches:\n  #     - main\n  workflow_dispatch:\n  schedule:\n    - cron: &#39;0 */3 * * *&#39;\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          ref: main\n          token: ${{ secrets.token }}\n      - name: Setup Python\n        uses: actions/setup-python@v2\n      - name: Run Python\n        run: python test.py\n      - name: Commit files\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: Action Commit\n          push_options: --force\n</code></pre>\n<h2 id=\"文档\">文档</h2>\n<blockquote>\n<p><a href=\"https://github.com/stefanzweifel/git-auto-commit-action\">https://github.com/stefanzweifel/git-auto-commit-action</a></p>\n</blockquote>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Github"
            ],
            "date_published": "2022-02-23T16:46:46+08:00",
            "date_modified": "2022-02-23T16:49:04+08:00"
        },
        {
            "id": "https://nanoc.work/python-telegram-ku/",
            "url": "https://nanoc.work/python-telegram-ku/",
            "title": "Python Telegram 库",
            "summary": "Python html to telegra.ph poster https://pypi.org/project/html-telegraph-poster/ Simple python function to post plain html text to https://telegra.ph/. Telegra.ph allows &lt;a&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;em&gt;, &lt;figure&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;img&gt;, &lt;p&gt;, &lt;strong&gt;, elements. It also supports embedded youtube and vimeo iframe tags. ",
            "content_html": "<h2 id=\"python-html-to-telegraph-poster\">Python html to telegra.ph poster</h2>\n<blockquote>\n<p><a href=\"https://pypi.org/project/html-telegraph-poster/\">https://pypi.org/project/html-telegraph-poster/</a></p>\n</blockquote>\n<pre><code>Simple python function to post plain html text to https://telegra.ph/. Telegra.ph allows &lt;a&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;em&gt;, &lt;figure&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;img&gt;, &lt;p&gt;, &lt;strong&gt;, elements. It also supports embedded youtube and vimeo iframe tags.\n</code></pre>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-02-23T15:14:04+08:00",
            "date_modified": "2022-02-23T15:22:19+08:00"
        },
        {
            "id": "https://nanoc.work/python-wang-pan-fen-xiang-xia-zai-ku/",
            "url": "https://nanoc.work/python-wang-pan-fen-xiang-xia-zai-ku/",
            "title": "Python 网盘分享下载库",
            "summary": "Only ondrive https://pypi.org/project/onedrivedownloader/ https://pypi.org/project/cloud-downloader-equitania/ ",
            "content_html": "<h2 id=\"only-ondrive\">Only ondrive</h2>\n<blockquote>\n<p><a href=\"https://pypi.org/project/onedrivedownloader/\">https://pypi.org/project/onedrivedownloader/</a></p>\n</blockquote>\n<h2 id=\"onedrive-and-others\">Onedrive and others</h2>\n<blockquote>\n<p><a href=\"https://pypi.org/project/cloud-downloader-equitania/\">https://pypi.org/project/cloud-downloader-equitania/</a></p>\n</blockquote>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-02-22T13:18:12+08:00",
            "date_modified": "2022-02-23T15:14:16+08:00"
        },
        {
            "id": "https://nanoc.work/nginx-wei-jing-tai/",
            "url": "https://nanoc.work/nginx-wei-jing-tai/",
            "title": "Nginx 伪静态",
            "summary": "入门 您需要了解以下知识 使 /public/a.php?b=test 变为 /public/a-test.json location ~ ^(.*)/public/a-(.*)\\.json { rewrite /public/a-(.*).json /public/a.php?b=$1 last; } 文档 https://www.cnblogs.com/kevingrace/p/10393234.html ",
            "content_html": "<h2 id=\"入门\">入门</h2>\n<p>您需要了解以下知识</p>\n<ul>\n<li>正则表达式</li>\n<li>Nginx 配置文件</li>\n</ul>\n<h2 id=\"实例\">实例</h2>\n<p>使 /public/a.php?b=test 变为 /public/a-test.json</p>\n<pre><code>location ~ ^(.*)/public/a-(.*)\\.json  {\n  rewrite /public/a-(.*).json /public/a.php?b=$1 last;\n}\n</code></pre>\n<h2 id=\"文档\">文档</h2>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/kevingrace/p/10393234.html\">https://www.cnblogs.com/kevingrace/p/10393234.html</a></p>\n</blockquote>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Nginx"
            ],
            "date_published": "2022-02-18T17:33:08+08:00",
            "date_modified": "2022-02-18T18:15:32+08:00"
        },
        {
            "id": "https://nanoc.work/v2rayn-muxduo-lu-fu-yong/",
            "url": "https://nanoc.work/v2rayn-muxduo-lu-fu-yong/",
            "title": "v2rayN Mux多路复用",
            "summary": "Mux多路复用 顾名思义，Mux功能可将多个TCP连接合并为一个TCP连接，以减少TCP握手延迟，但此种方法并不能提高吞吐量，即不会突破原始链路最大速率，适用于高延迟丢包线路，正常线路不建议开，会降低代理稳定性。 Mux只需要在客户端启用， 服务器端自适应。 https://www.v2ray.com/chapter_02/mux.html https://www.v2ray.com/developer/protocols/muxcool.html ",
            "content_html": "<h2 id=\"mux多路复用\">Mux多路复用</h2>\n<p>顾名思义，Mux功能可将多个TCP连接合并为一个TCP连接，以减少TCP握手延迟，但此种方法并不能提高吞吐量，即不会突破原始链路最大速率，适用于高延迟丢包线路，正常线路不建议开，会降低代理稳定性。\nMux只需要在客户端启用， 服务器端自适应。</p>\n<blockquote>\n<p><a href=\"https://www.v2ray.com/chapter_02/mux.html\">https://www.v2ray.com/chapter_02/mux.html</a>\n<a href=\"https://www.v2ray.com/developer/protocols/muxcool.html\">https://www.v2ray.com/developer/protocols/muxcool.html</a></p>\n</blockquote>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Others"
            ],
            "date_published": "2022-02-10T13:17:40+08:00",
            "date_modified": "2022-02-10T13:17:40+08:00"
        },
        {
            "id": "https://nanoc.work/raw-manga-website/",
            "url": "https://nanoc.work/raw-manga-website/",
            "title": "Raw Manga Website",
            "summary": "Raw manga You can find raw manga from the websites: https://klmag.net/index https://neatmanga.com/ ",
            "content_html": "<h2 id=\"raw-manga\">Raw manga</h2>\n<p>You can find raw manga from the websites:</p>\n<blockquote>\n<p><a href=\"https://klmag.net/index\">https://klmag.net/index</a><br><a href=\"https://neatmanga.com/\">https://neatmanga.com/</a></p>\n</blockquote>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Others"
            ],
            "date_published": "2022-02-08T17:48:50+08:00",
            "date_modified": "2022-02-08T17:50:33+08:00"
        },
        {
            "id": "https://nanoc.work/python-request/",
            "url": "https://nanoc.work/python-request/",
            "title": "Python Request Timeout",
            "summary": "Source You can find more data from URLs: https://github.com/psf/requests https://docs.python-requests.org/en/latest/ https://pypi.org/project/requests/ pip install requests or pip3 install requests In the event of a network problem (e.g. DNS failure, refused connection, etc), Requests will raise a ConnectionError exception. Response.raise_for_status() will raise an HTTPError if the HTTP&hellip;",
            "content_html": "<h2 id=\"source\">Source</h2>\n<p>You can find more data from URLs:</p>\n<blockquote>\n<p><a href=\"https://github.com/psf/requests\">https://github.com/psf/requests</a><br><a href=\"https://docs.python-requests.org/en/latest/\">https://docs.python-requests.org/en/latest/</a>\n<a href=\"https://pypi.org/project/requests/\">https://pypi.org/project/requests/</a></p>\n</blockquote>\n<h2 id=\"install\">Install</h2>\n<p>pip install requests\nor\npip3 install requests</p>\n<h2 id=\"errors-and-exceptions\">Errors and Exceptions</h2>\n<blockquote>\n<p>In the event of a network problem (e.g. DNS failure, refused connection, etc), Requests will raise a ConnectionError exception.</p>\n</blockquote>\n<blockquote>\n<p>Response.raise_for_status() will raise an HTTPError if the HTTP request returned an unsuccessful status code.</p>\n</blockquote>\n<blockquote>\n<p>If a request times out, a Timeout exception is raised.</p>\n</blockquote>\n<blockquote>\n<p>If a request exceeds the configured number of maximum redirections, a TooManyRedirects exception is raised.</p>\n</blockquote>\n<blockquote>\n<p>All exceptions that Requests explicitly raises inherit from requests.exceptions.RequestException.</p>\n</blockquote>\n<h2 id=\"make-timeout\">Make Timeout</h2>\n<p>So we can set the timeout as follows:</p>\n<pre><code class=\"language-python\">try:\n    response = requests.get(url,timeout=2)\nexcept requests.exceptions.RequestException as e:\n    function()\n</code></pre>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-02-07T19:14:03+08:00",
            "date_modified": "2022-02-08T17:50:26+08:00"
        },
        {
            "id": "https://nanoc.work/amhmian-ban-lu-jing/",
            "url": "https://nanoc.work/amhmian-ban-lu-jing/",
            "title": "AMH面板路径",
            "summary": "Python连接数据库 路径位于/tmp/mysql*.sock 例：unix_socket=’/tmp/mysql-5.6.sock’ /home/wwwroot/ vhost中包含了不同站点Nginx的配置文件 /usr/local/bin /usr/local/redis-6.2/bin/redis-cli ",
            "content_html": "<h2 id=\"python连接数据库\">Python连接数据库</h2>\n<p>路径位于/tmp/mysql*.sock\n例：unix_socket=’/tmp/mysql-5.6.sock’</p>\n<h2 id=\"运行环境配置路径\">运行环境配置路径</h2>\n<p>/home/wwwroot/\nvhost中包含了不同站点Nginx的配置文件</p>\n<h2 id=\"软件配置\">软件配置</h2>\n<p>/usr/local/bin</p>\n<h2 id=\"reids客户端路径\">Reids客户端路径</h2>\n<p>/usr/local/redis-6.2/bin/redis-cli</p>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Linux"
            ],
            "date_published": "2022-02-06T22:52:15+08:00",
            "date_modified": "2022-02-08T16:40:30+08:00"
        },
        {
            "id": "https://nanoc.work/linux-fu-wu-qi-mian-ban-hui-zong-2/",
            "url": "https://nanoc.work/linux-fu-wu-qi-mian-ban-hui-zong-2/",
            "title": "Linux 服务器面板汇总",
            "summary": "用途 这里主要指提供Web Server环境快速部署，以快速上线PHP项目，并提供优质的性能体验，或降低开站门槛提供完整的建站体验。 快速部署LNMP、LAMP 提供 Let’s Encrypt 证书或自由证书启用HTTPS 隐藏了部分技术细节对新手友好 以下将列举我所使用过的几个产品。 国内 名字 描述 宝塔 为Python所编写，提供免费版，适合所有人 AMH面板 起始2011年，但UI较难懂，适合具有一定经验 国外 名字 描述 cyberpanel 使用Openlitespeed，UI简洁，提供免费版，完整的DNS和邮局体验 Vesta 提供LNMP、LAMP，邮箱，DNS ",
            "content_html": "<h2 id=\"用途\">用途</h2>\n<p>这里主要指提供Web Server环境快速部署，以快速上线PHP项目，并提供优质的性能体验，或降低开站门槛提供完整的建站体验。</p>\n<ul>\n<li>快速部署LNMP、LAMP</li>\n<li>提供 Let’s Encrypt 证书或自由证书启用HTTPS</li>\n<li>隐藏了部分技术细节对新手友好\n以下将列举我所使用过的几个产品。</li>\n</ul>\n<!-- more -->\n\n<h2 id=\"国内\">国内</h2>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>宝塔</td>\n<td>为Python所编写，提供免费版，适合所有人</td>\n</tr>\n<tr>\n<td>AMH面板</td>\n<td>起始2011年，但UI较难懂，适合具有一定经验</td>\n</tr>\n</tbody></table>\n<h2 id=\"国外\">国外</h2>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cyberpanel</td>\n<td>使用Openlitespeed，UI简洁，提供免费版，完整的DNS和邮局体验</td>\n</tr>\n<tr>\n<td>Vesta</td>\n<td>提供LNMP、LAMP，邮箱，DNS</td>\n</tr>\n</tbody></table>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Linux"
            ],
            "date_published": "2022-02-06T22:09:21+08:00",
            "date_modified": "2022-02-06T22:54:47+08:00"
        },
        {
            "id": "https://nanoc.work/python-useragent-ku/",
            "url": "https://nanoc.work/python-useragent-ku/",
            "title": "Python UserAgent 库",
            "summary": "Python UserAgent 库 my-fake-useragent https://pypi.org/project/my-fake-useragent/ https://github.com/a358003542/my-fake-useragent 针对Useragent访问频次限制的站点，每次请求更换一个Useragent即可。 pip install my_fake_useragent //python3 pip3 install my_fake_useragent 特点 提供浏览器定制，如Chrome、Edge，包括移动端 from my_fake_useragent import UserAgent ua = UserAgent(family=&#39;chrome&#39;) res = ua.random() 在限制Useragent的情况下，且长达数万频次的爬取中，程序顺利执行完毕。 ",
            "content_html": "<h1 id=\"python-useragent-库\">Python UserAgent 库</h1>\n<p>my-fake-useragent</p>\n<blockquote>\n<p><a href=\"https://pypi.org/project/my-fake-useragent/\">https://pypi.org/project/my-fake-useragent/</a>\n<a href=\"https://github.com/a358003542/my-fake-useragent\">https://github.com/a358003542/my-fake-useragent</a></p>\n</blockquote>\n<h2 id=\"用处\">用处</h2>\n<p>针对Useragent访问频次限制的站点，每次请求更换一个Useragent即可。</p>\n<h2 id=\"安装\">安装</h2>\n<pre><code class=\"language-shell\">pip install my_fake_useragent\n//python3\npip3 install my_fake_useragent\n</code></pre>\n<h2 id=\"特点\">特点</h2>\n<p>提供浏览器定制，如Chrome、Edge，包括移动端</p>\n<h2 id=\"使用\">使用</h2>\n<pre><code class=\"language-python\">from my_fake_useragent import UserAgent\nua = UserAgent(family=&#39;chrome&#39;)\nres = ua.random()\n</code></pre>\n<p>在限制Useragent的情况下，且长达数万频次的爬取中，程序顺利执行完毕。</p>\n",
            "author": {
                "name": "Nanoc"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2022-02-06T14:14:00+08:00",
            "date_modified": "2022-02-06T14:14:00+08:00"
        }
    ]
}
