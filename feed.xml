<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Nanoc</title>
    <link href="https://blog.nanoc.work/feed.xml" rel="self" />
    <link href="https://blog.nanoc.work" />
    <updated>2022-02-05T19:48:36+08:00</updated>
    <author>
        <name>Nanoc</name>
    </author>
    <id>https://blog.nanoc.work</id>

    <entry>
        <title>Docker常用启动参数</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://blog.nanoc.work/dockerchang-yong-qi-dong-can-shu/"/>
        <id>https://blog.nanoc.work/dockerchang-yong-qi-dong-can-shu/</id>
            <category term="Docker"/>

        <updated>2022-02-05T19:48:36+08:00</updated>
            <summary>
                <![CDATA[
                    Docker常用启动参数 通过启动参数来创建Docker容器 创建Centos8 docker run -i -t -d --name centos8 --cpus="3" -m 600m -p 30001:22 -p 30002:21 -p 30005:80 -p 30006:443 --restart=always --dns 114.114.114.114 -v /opt/www:/www --privileged=true centos:latest 创建nextcloud docker run -d --name nextcloud --restart=always --dns 114.114.114.114 -p 8080:80 -v /opt/nextcloud:/var/www/html --cpus="3" -m 400m nextcloud&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="docker常用启动参数">Docker常用启动参数</h2>
<p><strong>通过启动参数来创建Docker容器</strong></p>
<!--more-->


<ul>
<li>-i “交互模式”运行容器</li>
<li>-t 容器启动后会进入其命令行</li>
<li>-d 创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)</li>
<li>–name 为容器命名</li>
<li>-p xx:xx 表示端口映射</li>
<li>–cpus=”x” 表示CPU限制</li>
<li>-m 400m 控制内存大小</li>
<li>-v /xx:/xx 映射存储卷</li>
<li>–dns 114.114.114.114 设置DNS</li>
<li>–restart=always 跟随容器启动</li>
<li>–network=host host网络</li>
<li>-e TZ=”Asia/Shanghai” 修改时区</li>
<li>–privileged=true 拥有写入权</li>
</ul>
<h2 id="实例">实例</h2>
<p><strong>创建Centos8</strong>
<code>docker run -i -t -d --name centos8 --cpus="3" -m 600m -p 30001:22  -p 30002:21  -p 30005:80  -p 30006:443  --restart=always  --dns 114.114.114.114 -v /opt/www:/www --privileged=true centos:latest</code>
<strong>创建nextcloud</strong>
<code>docker run -d --name nextcloud --restart=always --dns 114.114.114.114 -p 8080:80 -v /opt/nextcloud:/var/www/html --cpus="3" -m 400m  nextcloud</code>
<strong>更多例子</strong></p>
<pre><code class="language-shell">docker run -d -p 30001:80 --name kodexplorer -v /opt/kodexplorer:/var/www/html ugeek/kodexplorer:arm

docker run -it --network=host azking/arm64_bt59_lnmp sh /www/init.sh

docker run -i -t -d --name centos8 -p 30002:80 -p 30003:443 -p 30004:30004 --privileged=true --cpus=&quot;3&quot; -m 550m  -v /opt/www:/www centos:latest

docker run -i -t -d --name centos8 --restart always --privileged=true --cpus=&quot;2&quot; -m 128m  centos:latest

docker run -d --name nextcloud --restart=always --dns 114.114.114.114 -p 8080:80 -v /opt/nextcloud:/var/www/html --cpus=&quot;3&quot; -m 400m  nextcloud
 
docker run -d --name kodbox --dns 114.114.114.114 -p 30000:80 -p 30001:443 --cpus=&quot;3&quot; -m 400m -v /opt/kodbox:/var/www/html scjtqs/kodbox:arm64 kodbox

docker run -d --name  kodbox  --restart=always  --dns 114.114.114.114 -p 30000:80 -p 30001:443 --cpus=&quot;3&quot; -m 400m -v /opt/kodbox:/var/www/html lstcml/kodbox kodbox

docker run -d --name cloudreve  --dns 114.114.114.114 -e PUID=0 -e PGID=0 -e TZ=&quot;Asia/Shanghai&quot; -p 30001:5212 --cpus=&quot;3&quot; -m 400m  --restart=unless-stopped xavierniu/cloudreve:3.2.0-arm64v8

docker run -d --name=typecho-blog --cpus=&quot;3&quot; -m 300m --restart always --mount type=tmpfs,destination=/tmp -v /opt/typecho:/data -e PHP_TZ=Asia/Shanghai -e PHP_MAX_EXECUTION_TIME=600 -p 30000:80 80x86/typecho:arm64
</code></pre>
<h2 id="进入centos8容器">进入Centos8容器</h2>
<pre><code class="language-shell">docker exec -it 容器名 bash
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Cpp Bitset </title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://blog.nanoc.work/cpp-bitset/"/>
        <id>https://blog.nanoc.work/cpp-bitset/</id>
            <category term="C++"/>

        <updated>2022-02-05T19:23:51+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.nanoc.work/media/posts/147/1.png" alt="" />
                     Bitset C++的 bitset 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。 bitset&lt;4&gt; bitset1; //无参构造，长度为４，默认每一位为０ bitset&lt;8&gt; bitset2(12); //长度为８，二进制保存，前面用０补充 string z = "100101"; bitset&lt;10&gt; bitset3(z); //长度为10，前面用０补充 char s2[] = "10101"; bitset&lt;13&gt; bitset4(s2); //长度为13，前面用０补充 cout &lt;&lt; bitset1 &lt;&lt; endl; //0000 cout &lt;&lt; bitset2 &lt;&lt; endl; //00001100 cout &lt;&lt; bitset3 &lt;&lt; endl; //0000100101&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://blog.nanoc.work/media/posts/147/1.png" alt="" />
                
    <h2 id="bitset">
      Bitset
    </h2>

  <p>
    C++的 bitset 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。
  </p>
<pre class="line-numbers  language-html"><code> bitset&lt;4&gt; bitset1; 
 //无参构造，长度为４，默认每一位为０

 bitset&lt;8&gt; bitset2(12); 
 //长度为８，二进制保存，前面用０补充

 string z = "100101";
 bitset&lt;10&gt; bitset3(z); 
 //长度为10，前面用０补充

 char s2[] = "10101";
 bitset&lt;13&gt; bitset4(s2); 
 //长度为13，前面用０补充

 cout &lt;&lt; bitset1 &lt;&lt; endl; //0000
 cout &lt;&lt; bitset2 &lt;&lt; endl; //00001100
 cout &lt;&lt; bitset3 &lt;&lt; endl; //0000100101
 cout &lt;&lt; bitset4 &lt;&lt; endl; //0000000010101
 bitset&lt;2&gt; bitset1(12);  
 //12的二进制为1100（长度为４），但bitset1的size=2，只取后面部分，即00

 string x = "100101";
 bitset&lt;4&gt; bitset2(x); 
 //x的size=6，而bitset的size=4，只取前面部分，即1001

 char s2[] = "11101";
 bitset&lt;4&gt; bitset3(s2); 
 //与bitset2同理，只取前面部分，即1110

 cout &lt;&lt; bitset1 &lt;&lt; endl; //00
 cout &lt;&lt; bitset2 &lt;&lt; endl; //1001
 cout &lt;&lt; bitset3 &lt;&lt; endl; //1110

 bitset&lt;8&gt; foo("10011011");
 string s = foo.to_string();
 //将bitset转换成string类型
 unsigned long a = foo.to_ulong();  
 //将bitset转换成unsigned long类型
 unsigned long long b = foo.to_ullong(); 
 //将bitset转换成unsigned long long类型
 cout &lt;&lt; s &lt;&lt; endl; //10011011
 cout &lt;&lt; a &lt;&lt; endl; //155
 cout &lt;&lt; b &lt;&lt; endl; //155</code></pre>
            ]]>
        </content>
    </entry>
</feed>
