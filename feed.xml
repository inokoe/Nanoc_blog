<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Nanoc</title>
    <link href="https://nanoc.work/feed.xml" rel="self" />
    <link href="https://nanoc.work" />
    <updated>2022-02-06T22:52:32+08:00</updated>
    <author>
        <name>Nanoc</name>
    </author>
    <id>https://nanoc.work</id>

    <entry>
        <title>AMH面板路径</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://nanoc.work/amhmian-ban-lu-jing/"/>
        <id>https://nanoc.work/amhmian-ban-lu-jing/</id>
            <category term="Linux"/>

        <updated>2022-02-06T22:52:32+08:00</updated>
            <summary>
                <![CDATA[
                    Python连接数据库 路径位于/tmp/mysql*.sock 例：unix_socket=’/tmp/mysql-5.6.sock’ /home/wwwroot/ vhost中包含了不同站点Nginx的配置文件 /usr/local/bin 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="python连接数据库">Python连接数据库</h2>
<p>路径位于/tmp/mysql*.sock
例：unix_socket=’/tmp/mysql-5.6.sock’</p>
<h2 id="运行环境配置路径">运行环境配置路径</h2>
<p>/home/wwwroot/
vhost中包含了不同站点Nginx的配置文件</p>
<h2 id="软件配置">软件配置</h2>
<p>/usr/local/bin</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Linux 服务器面板汇总</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://nanoc.work/linux-fu-wu-qi-mian-ban-hui-zong-2/"/>
        <id>https://nanoc.work/linux-fu-wu-qi-mian-ban-hui-zong-2/</id>
            <category term="Linux"/>

        <updated>2022-02-06T22:52:25+08:00</updated>
            <summary>
                <![CDATA[
                    用途 这里主要指提供Web Server环境快速部署，以快速上线PHP项目，并提供优质的性能体验，或降低开站门槛提供完整的建站体验。 快速部署LNMP、LAMP 提供 Let’s Encrypt 证书或自由证书启用HTTPS 隐藏了部分技术细节对新手友好 以下将列举我所使用过的几个产品。 国内 名字 描述 宝塔 为Python所编写，提供免费版，适合所有人 AMH面板 起始2011年，但UI较难懂，适合具有一定经验 国外 名字 描述 cyberpanel 使用Openlitespeed，UI简洁，提供免费版，完整的DNS和邮局体验 Vesta 提供LNMP、LAMP，邮箱，DNS 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="用途">用途</h2>
<p>这里主要指提供Web Server环境快速部署，以快速上线PHP项目，并提供优质的性能体验，或降低开站门槛提供完整的建站体验。</p>
<ul>
<li>快速部署LNMP、LAMP</li>
<li>提供 Let’s Encrypt 证书或自由证书启用HTTPS</li>
<li>隐藏了部分技术细节对新手友好
以下将列举我所使用过的几个产品。</li>
</ul>
<h2 id="国内">国内</h2>
<table>
<thead>
<tr>
<th>名字</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>宝塔</td>
<td>为Python所编写，提供免费版，适合所有人</td>
</tr>
<tr>
<td>AMH面板</td>
<td>起始2011年，但UI较难懂，适合具有一定经验</td>
</tr>
</tbody></table>
<h2 id="国外">国外</h2>
<table>
<thead>
<tr>
<th>名字</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>cyberpanel</td>
<td>使用Openlitespeed，UI简洁，提供免费版，完整的DNS和邮局体验</td>
</tr>
<tr>
<td>Vesta</td>
<td>提供LNMP、LAMP，邮箱，DNS</td>
</tr>
</tbody></table>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Python UserAgent 库</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://nanoc.work/python-useragent-ku/"/>
        <id>https://nanoc.work/python-useragent-ku/</id>
            <category term="Python"/>

        <updated>2022-02-06T14:14:00+08:00</updated>
            <summary>
                <![CDATA[
                    Python UserAgent 库 my-fake-useragent https://pypi.org/project/my-fake-useragent/ https://github.com/a358003542/my-fake-useragent 针对Useragent访问频次限制的站点，每次请求更换一个Useragent即可。 pip install my_fake_useragent //python3 pip3 install my_fake_useragent 特点 提供浏览器定制，如Chrome、Edge，包括移动端 from my_fake_useragent import UserAgent ua = UserAgent(family=&#39;chrome&#39;) res = ua.random() 在限制Useragent的情况下，且长达数万频次的爬取中，程序顺利执行完毕。 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="python-useragent-库">Python UserAgent 库</h1>
<p>my-fake-useragent</p>
<blockquote>
<p><a href="https://pypi.org/project/my-fake-useragent/">https://pypi.org/project/my-fake-useragent/</a>
<a href="https://github.com/a358003542/my-fake-useragent">https://github.com/a358003542/my-fake-useragent</a></p>
</blockquote>
<h2 id="用处">用处</h2>
<p>针对Useragent访问频次限制的站点，每次请求更换一个Useragent即可。</p>
<h2 id="安装">安装</h2>
<pre><code class="language-shell">pip install my_fake_useragent
//python3
pip3 install my_fake_useragent
</code></pre>
<h2 id="特点">特点</h2>
<p>提供浏览器定制，如Chrome、Edge，包括移动端</p>
<h2 id="使用">使用</h2>
<pre><code class="language-python">from my_fake_useragent import UserAgent
ua = UserAgent(family=&#39;chrome&#39;)
res = ua.random()
</code></pre>
<p>在限制Useragent的情况下，且长达数万频次的爬取中，程序顺利执行完毕。</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Linux更换DNS</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://nanoc.work/linuxgeng-huan-dns/"/>
        <id>https://nanoc.work/linuxgeng-huan-dns/</id>
            <category term="Linux"/>

        <updated>2022-02-06T13:57:16+08:00</updated>
            <summary>
                <![CDATA[
                    echo -e &quot;options timeout:1 attempts:1 rotate\nnameserver 8.8.8.8\nnameserver 114.114.114.114&quot; &gt;/etc/resolv.conf; 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre><code class="language-shell">echo -e &quot;options timeout:1 attempts:1 rotate\nnameserver 8.8.8.8\nnameserver 114.114.114.114&quot; &gt;/etc/resolv.conf;
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>时间线分隔符</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://nanoc.work/shi-jian-xian-fen-ge-fu/"/>
        <id>https://nanoc.work/shi-jian-xian-fen-ge-fu/</id>
            <category term="Others"/>

        <updated>2022-02-05T20:21:20+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://nanoc.work/media/posts/163/2.jpg" alt="" />
                    时光荏苒，转眼一年已过，由于服务器到期，将现有写过的仍具有一定价值的文章转移至此，服务暂由Netlify提供，以便无后端快速记录。 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://nanoc.work/media/posts/163/2.jpg" alt="" />
                <p>时光荏苒，转眼一年已过，由于服务器到期，将现有写过的仍具有一定价值的文章转移至此，服务暂由Netlify提供，以便无后端快速记录。</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Python-request&amp;beautifulsoup爬虫使用方法速记</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://nanoc.work/python-requestandbeautifulsouppa-chong-shi-yong-fang-fa-su-ji/"/>
        <id>https://nanoc.work/python-requestandbeautifulsouppa-chong-shi-yong-fang-fa-su-ji/</id>
            <category term="Python"/>

        <updated>2022-02-05T20:05:40+08:00</updated>
            <summary>
                <![CDATA[
                    Python-request&amp;beautifulsoup爬虫使用方法速记 简单记录request&amp;bs4使用方法。 import requests # 浏览器头 headers = { &#39;user_agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&#39; } # 传参 params = {} params[&#39;email&#39;] = userName[number] params[&#39;passwd&#39;] = userPasswd[number] # 发送request get请求 response = requests.get(url=url, params=params, headers=headers) # 发送request post请求 response&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="python-requestbeautifulsoup爬虫使用方法速记">Python-request&amp;beautifulsoup爬虫使用方法速记</h2>
<p>简单记录request&amp;bs4使用方法。</p>
<h2 id="request">request</h2>
<pre><code class="language-python">import requests
# 浏览器头
headers = {
    &#39;user_agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&#39;
}
# 传参
params = {}
params[&#39;email&#39;] = userName[number]
params[&#39;passwd&#39;] = userPasswd[number]
# 发送request get请求
response = requests.get(url=url, params=params, headers=headers)
# 发送request post请求
response = requests.post(url=url, params=params, headers=headers)
</code></pre>
<pre><code class="language-python">headers = {
    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; WOW64)&#39;
    &#39; AppleWebKit/537.36(KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&#39;,
    &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,
}
</code></pre>
<h2 id="beautifulsoup">beautifulsoup</h2>
<pre><code class="language-python">from bs4 import BeautifulSoup

#-----
# 解析|
#-----
# 发起请求
response = requests.get(url, headers=headers)
# 指定编码
response.encoding = &#39;utf-8&#39;
soup = BeautifulSoup(response.text)
# 使用lxml解析
soup = BeautifulSoup(html, &#39;lxml&#39;)

#--------
# 元素选择| # 使用selector,返回list
#--------
# 选择指定元素一次
soup = soup.select_one(&quot;a&quot;)
# 选择全部指定元素
soup = soup.select(&quot;a&quot;)
# 选择全部指定元素
soup = soup.find_all(&quot;a&quot;)
# 按照属性查找
soup = soup.select_one(&#39;p [href=&quot;http://example.com/tillie&quot;]&#39;)
# 通过 id 名查找
soup.select_one(&#39;#ID&#39;)
# 通过类名查找
soup.select_one(&#39;.sister&#39;)
#循环
for i in soup:
    print(i.text)

#--------
# 获取属性|
#--------
list[0].get(&#39;href&#39;)


#--------
# Xpath|
#--------
demo = selector.xpath(&#39;&#39;)
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Python进行Base64解码</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://nanoc.work/pythonjin-xing-base64jie-ma/"/>
        <id>https://nanoc.work/pythonjin-xing-base64jie-ma/</id>
            <category term="Python"/>

        <updated>2022-02-05T20:05:17+08:00</updated>
            <summary>
                <![CDATA[
                    Python进行Base64解码 使用base64进行解码 import base64 message = &quot;Hello&quot; # 返回字节对象 a = bytes(message, &#39;utf-8&#39;) print(a) # Base64编码 b = base64.b64encode(a) print(b) # Base64解码并.decode(&#39;utf-8&#39;)去掉b&#39;&#39; c = base64.b64decode(b).decode(&#39;utf-8&#39;) print(c) 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="python进行base64解码">Python进行Base64解码</h2>
<p>使用base64进行解码</p>
<pre><code class="language-python">import base64

message = &quot;Hello&quot;
# 返回字节对象
a = bytes(message, &#39;utf-8&#39;)
print(a)
# Base64编码
b = base64.b64encode(a)
print(b)
# Base64解码并.decode(&#39;utf-8&#39;)去掉b&#39;&#39;
c = base64.b64decode(b).decode(&#39;utf-8&#39;)
print(c)
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Python Multiprocessing用法简单速记</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://nanoc.work/python-multiprocessingyong-fa-jian-dan-su-ji/"/>
        <id>https://nanoc.work/python-multiprocessingyong-fa-jian-dan-su-ji/</id>
            <category term="Python"/>

        <updated>2022-02-05T20:04:59+08:00</updated>
            <summary>
                <![CDATA[
                    Python Multiprocessing用法简单速记 使用Multiprocessing进行简单多进程。 from multiprocessing import Pool import time import random def toPool(todo): newarr = [] for i in range(1000): newarr.append(random.random()*10) newarr.sort() if __name__ == &quot;__main__&quot;: start_time = time.time() arr = [] for i in range(10000): arr.append(i) for i in arr: newarr = [] for&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="python-multiprocessing用法简单速记">Python Multiprocessing用法简单速记</h2>
<p>使用Multiprocessing进行简单多进程。</p>
<pre><code class="language-python">from multiprocessing import Pool
import time
import random

def toPool(todo):
    newarr = []
    for i in range(1000):
        newarr.append(random.random()*10)
        newarr.sort()


if __name__ == &quot;__main__&quot;:
    start_time = time.time()
    arr = []
    for i in range(10000):
        arr.append(i)
    for i in arr:
        newarr = []
        for i in range(1000):
            newarr.append(random.random()*10)
            newarr.sort()
    end_time = time.time()
    use_time = end_time - start_time
    print(&quot;first:&quot;+ str(use_time))
    # 多进程
    start_time = time.time()
    arr = []
    for i in range(10000):
        arr.append(i)
    pool = Pool(processes=4)
    pool.map(toPool, arr)
    pool.close()
    pool.join()
    end_time = time.time()
    use_time = end_time - start_time
    print(&quot;second:&quot;+ str(use_time))
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Python 文件读写操作</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://nanoc.work/python-wen-jian-du-xie-cao-zuo/"/>
        <id>https://nanoc.work/python-wen-jian-du-xie-cao-zuo/</id>
            <category term="Python"/>

        <updated>2022-02-05T20:04:42+08:00</updated>
            <summary>
                <![CDATA[
                    读写模式 值 描述 r 读模式 w 写模式 a 追加模式 b 二进制模式（可追加到其他模式中） + 读/写模式（可追加到其他模式中 # 追加读写模式 自动创建文件 f = open(&quot;demo.txt&quot;, &#39;a+&#39;, encoding=&quot;utf-8&quot;) f.write(soup.text) f.close() # 覆盖 自动创建文件 f = open(&quot;C:/Users/Inokoe/Desktop/demo.txt&quot;, &#39;w&#39;, encoding=&quot;utf-8&quot;) f.write(&#39;653&#39;) f.close() f = open(&quot;C:/Users/Inokoe/Desktop/demo.txt&quot;, &#39;w+&#39;, encoding=&quot;utf-8&quot;) f.write(&#39;653&#39;) # 定位到开头可以正常读取 f.seek(0) print(f.read()) f.close() #&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="读写模式">读写模式</h2>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>读模式</td>
</tr>
<tr>
<td>w</td>
<td>写模式</td>
</tr>
<tr>
<td>a</td>
<td>追加模式</td>
</tr>
<tr>
<td>b</td>
<td>二进制模式（可追加到其他模式中）</td>
</tr>
<tr>
<td>+</td>
<td>读/写模式（可追加到其他模式中</td>
</tr>
</tbody></table>
<pre><code class="language-python"># 追加读写模式 自动创建文件
f = open(&quot;demo.txt&quot;, &#39;a+&#39;, encoding=&quot;utf-8&quot;)
f.write(soup.text)
f.close()

# 覆盖 自动创建文件
f = open(&quot;C:/Users/Inokoe/Desktop/demo.txt&quot;, &#39;w&#39;, encoding=&quot;utf-8&quot;)
f.write(&#39;653&#39;) 
f.close()

f = open(&quot;C:/Users/Inokoe/Desktop/demo.txt&quot;, &#39;w+&#39;, encoding=&quot;utf-8&quot;)
f.write(&#39;653&#39;) 
# 定位到开头可以正常读取
f.seek(0)
print(f.read())
f.close()

# 只读
f = open(&quot;C:/Users/Inokoe/Desktop/demo.txt&quot;, &#39;r&#39;, encoding=&quot;utf-8&quot;)
f.write(&#39;653&#39;) 
f.close()
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Cpp 利用stringstream转换字符</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://nanoc.work/cpp-li-yong-stringstreamzhuan-huan-zi-fu/"/>
        <id>https://nanoc.work/cpp-li-yong-stringstreamzhuan-huan-zi-fu/</id>
            <category term="C++"/>

        <updated>2022-02-05T20:04:19+08:00</updated>
            <summary>
                <![CDATA[
                    stringstream stringstream是包含在中的，其中定义了三个类：istringstream、ostringstream 和 stringstream，分别用来进行流的输入、输出和输入输出操作。 #include &lt;bits/stdc++.h&gt; using namespace std; int main() { stringstream sts; string x = &quot;10&quot;; int z = 100; string y = &quot;&quot;; //string 给 string sts&lt;&lt;x; y = sts.str(); cout&lt;&lt;y&lt;&lt;endl; //清除缓冲区 /* 在多次数据类型转换的场景下，必须使用 clear() 方法清空 stringstream，不使用 clear()方法或使用 str(&quot;&quot;) 方法，都不能得到数据类型转换的正确结果。 */ sts.str(&quot;&quot;);&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="stringstream">stringstream</h2>
<blockquote>
<p>stringstream是包含在<sstream>中的，其中定义了三个类：istringstream、ostringstream 和 stringstream，分别用来进行流的输入、输出和输入输出操作。</p>
</blockquote>
<h2 id="用法">用法</h2>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;

int main()
{
    stringstream sts;
    string x = &quot;10&quot;; 
    int z = 100;
    string y = &quot;&quot;;

    //string 给 string
    sts&lt;&lt;x;
    y = sts.str();
    cout&lt;&lt;y&lt;&lt;endl;
    
    //清除缓冲区
    /*
    在多次数据类型转换的场景下，必须使用 clear() 方法清空 stringstream，不使用 clear()方法或使用 str(&quot;&quot;) 方法，都不能得到数据类型转换的正确结果。
    */
    sts.str(&quot;&quot;);
    sts.clear();

    //int 给 string
    sts&lt;&lt;z;
    x = sts.str();
    cout&lt;&lt;x&lt;&lt;endl;

    return 0;
}
</code></pre>

            ]]>
        </content>
    </entry>
</feed>
