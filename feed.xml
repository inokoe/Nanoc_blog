<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Nanoc</title>
    <link href="https://blog.nanoc.work/feed.xml" rel="self" />
    <link href="https://blog.nanoc.work" />
    <updated>2022-02-05T17:57:55+08:00</updated>
    <author>
        <name>Nanoc</name>
    </author>
    <id>https://blog.nanoc.work</id>

    <entry>
        <title>Bitset 用法</title>
        <author>
            <name>Nanoc</name>
        </author>
        <link href="https://blog.nanoc.work/bitset-yong-fa/"/>
        <id>https://blog.nanoc.work/bitset-yong-fa/</id>
            <category term="C++"/>

        <updated>2022-02-05T17:57:55+08:00</updated>
            <summary>
                <![CDATA[
                    bitset C++的 bitset 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。 bitset&lt;4&gt; bitset1; //无参构造，长度为４，默认每一位为０ bitset&lt;8&gt; bitset2(12); //长度为８，二进制保存，前面用０补充 string z = &quot;100101&quot;; bitset&lt;10&gt; bitset3(z); //长度为10，前面用０补充 char s2[] = &quot;10101&quot;; bitset&lt;13&gt; bitset4(s2); //长度为13，前面用０补充 cout &lt;&lt; bitset1 &lt;&lt; endl; //0000 cout &lt;&lt; bitset2 &lt;&lt; endl; //00001100 cout &lt;&lt; bitset3 &lt;&lt; endl; //0000100101 cout&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="bitset">bitset</h2>
<p>C++的 bitset 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。</p>
<!--more-->


<pre><code class="language-cpp">    bitset&lt;4&gt; bitset1; //无参构造，长度为４，默认每一位为０

    bitset&lt;8&gt; bitset2(12); //长度为８，二进制保存，前面用０补充

    string z = &quot;100101&quot;;
    bitset&lt;10&gt; bitset3(z); //长度为10，前面用０补充

    char s2[] = &quot;10101&quot;;
    bitset&lt;13&gt; bitset4(s2); //长度为13，前面用０补充

    cout &lt;&lt; bitset1 &lt;&lt; endl; //0000
    cout &lt;&lt; bitset2 &lt;&lt; endl; //00001100
    cout &lt;&lt; bitset3 &lt;&lt; endl; //0000100101
    cout &lt;&lt; bitset4 &lt;&lt; endl; //0000000010101
    bitset&lt;2&gt; bitset1(12);     //12的二进制为1100（长度为４），但bitset1的size=2，只取后面部分，即00

    string x = &quot;100101&quot;;
    bitset&lt;4&gt; bitset2(x); //x的size=6，而bitset的size=4，只取前面部分，即1001

    char s2[] = &quot;11101&quot;;
    bitset&lt;4&gt; bitset3(s2); //与bitset2同理，只取前面部分，即1110

    cout &lt;&lt; bitset1 &lt;&lt; endl; //00
    cout &lt;&lt; bitset2 &lt;&lt; endl; //1001
    cout &lt;&lt; bitset3 &lt;&lt; endl; //1110

    bitset&lt;8&gt; foo(&quot;10011011&quot;);
    string s = foo.to_string();
    //将bitset转换成string类型
    unsigned long a = foo.to_ulong();        //将bitset转换成unsigned long类型
    unsigned long long b = foo.to_ullong(); //将bitset转换成unsigned long long类型
    cout &lt;&lt; s &lt;&lt; endl;                        //10011011
    cout &lt;&lt; a &lt;&lt; endl;                        //155
    cout &lt;&lt; b &lt;&lt; endl;                        //155
</code></pre>
<blockquote>
<p><a href="https://www.cnblogs.com/magisk/p/8809922.html">https://www.cnblogs.com/magisk/p/8809922.html</a></p>
</blockquote>

            ]]>
        </content>
    </entry>
</feed>
